shiny::runApp()
source('openDir02.R')
source('openDir01.R')
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
# Packages
library(shiny)
library(shinyFiles)
library(DT)
library(readxl)
library(tidyr)
library(stringr)
library(shinycssloaders)
library(markdown)
library(parallel)
library(foreach)
library(doParallel)
library(bigstatsr) #FBM for parallel
library(tools)
library(lavaan)
library(png)
# install.packages(c("shiny", "DT", "readxl", "tidyr", "stringr", "shinycssloaders", "markdown", "parallel", "foreach", "doParallel", "bigstatsr", "tools", "lavaan", "png"))
# Reset if parallel connections on edelgene server didn't close properly (exited app during bootstrap)
if (nrow(showConnections()) > 38) {
pskill(Sys.getpid(), signal = SIGTERM)
}
Reference <- read_excel("Reference.xlsx") # Mouse to human reference table
allSig <- read_excel("allSig.xlsx") # All gene signature (high/low) table
setwd("x:/project2020/SEM/IndexCalculation/")
# Packages
library(shiny)
library(shinyFiles)
library(DT)
library(readxl)
library(tidyr)
library(stringr)
library(shinycssloaders)
library(markdown)
library(parallel)
library(foreach)
library(doParallel)
library(bigstatsr) #FBM for parallel
library(tools)
library(lavaan)
library(png)
# install.packages(c("shiny", "DT", "readxl", "tidyr", "stringr", "shinycssloaders", "markdown", "parallel", "foreach", "doParallel", "bigstatsr", "tools", "lavaan", "png"))
# Reset if parallel connections on edelgene server didn't close properly (exited app during bootstrap)
if (nrow(showConnections()) > 38) {
pskill(Sys.getpid(), signal = SIGTERM)
}
Reference <- read_excel("Reference.xlsx") # Mouse to human reference table
allSig <- read_excel("allSig.xlsx") # All gene signature (high/low) table
##==================================================================================
##  SEM_util.R
##  Author: Jianying Li
##  Comment: it was originally designed for handling SEM downstream analysis
##==================================================================================
##============================
##  SEM related functions
##============================
#		gettingPval (mod, dt, varOfInterest = 2)
#				mod - a SEM model set up
#				dt  -	of course a dataset
#       default varOfInterest = 2
# extracting the p-value from an SEM model
##=========================
##  util functions here
##=========================
gettingPval <- function (mod, dt, varOfInterest = 2)
{
require(lavaan)
mod.fit <- sem (mod, data = dt)
z.test <- mod.fit@ParTable$est[varOfInterest]/mod.fit@ParTable$se[varOfInterest]
return (2*(1-pnorm(abs(z.test))))
}
plotPvalText <- function (pvalResults, title)
{
color = rep ("green", length(pvalResults[,2]))
color[which( pvalResults[,1] %in%  head(pvalResults[ order(as.numeric(pvalResults[,2])),1],10))] = "red"
color [(which(as.numeric(pvalResults[,2]) > 0.05))] = "black"
plot(-log(as.numeric(pvalResults[,2])), ylab  = "Negative LogPvalue",
main = title, type = 'n')
text(-log(as.numeric(pvalResults[,2])), pvalResults[,1], cex = 0.7, col = color)
}
plotPvalTextDown <- function (pvalResults, title)
{
pvalResults = SEM.improvment
title = "GATA2 activity significance in SEM model"
}
runBootstrap <- function (dt, dat)
{
require(lavaan)
require(doParallel)
number.of.workers <- detectCores()
##==================================
##    Getting mean for each gene
##==================================
cl <- makeCluster(number.of.workers - 1)
registerDoParallel(cl)
collapsedArrays <- NULL
collapsedArrays <- foreach (i = 1: dim(dt)[1],
.combine = 'rbind' , .export ="sem") %dopar% {
temp.dat <- cbind(dat[,3], t(dt[i,]),dat[,14])
colnames(temp.dat) <- c("SOX17", "GATA2_act", "PGR_act")
mod <- 'SOX17 ~ GATA2_act + PGR_act'
mod.fit <- sem (mod, data=temp.dat )
z.test <- mod.fit@ParTable$est[1]/mod.fit@ParTable$se[1]
p.gata2 <- 2*(1-pnorm(abs(z.test)))
z.test <- mod.fit@ParTable$est[2]/mod.fit@ParTable$se[2]
p.pgr <- 2*(1-pnorm(abs(z.test)))
c(p.gata2,p.pgr)
}
stopCluster(cl)
return (collapsedArrays)
}
#calculate.p.vals <- function (filePath, dat)
#{
#  random.files <- list.files(path = filePath, pattern = "Random_")
#  for (f in random.files)
#  {
#    name = gsub (" ", "_", gsub ("Random_", "", gsub(".csv", "", f)))
#    out.file = paste (filePath, name, "_random_pvalues.txt", sep="")
#    in.file = paste (filePath, f, sep="")
#    dt <- read.csv(in.file)[,-1]
#    neg.pvalues <- runBootstrap (dt, dat)
#    colnames(neg.pvalues ) <- c("GATA2", "PGR")
#    write.table(neg.pvalues, file = out.file, sep="\t", col.names=NA)
#  }
#}
##==================================================
##  Functions to test significance
##==================================================
##=========================================================================
##  First, calculate random p-values from bootstrap with/without replacement
##=========================================================================
calculate.random.p.vals <- function (filePath, dat)
{
random.files <- list.files(path = filePath, pattern = "Random_")
for (f in random.files)
{
name = gsub (" ", "_", gsub ("Random_", "", gsub(".csv", "", f)))
##  replacing a space with an underscore
##  for a cleaner file name!!
out.file = paste (filePath, name, "_random_pvalues.txt", sep="")
in.file = paste (filePath, f, sep="")
dt <- read.csv(in.file)[,-1]
neg.pvalues <- runBootstrap (dt, dat)
colnames(neg.pvalues ) <- c("GATA2", "PGR")
write.table(neg.pvalues, file = out.file, sep="\t", col.names=NA)
}
}
##===========================================================
##  Secondly, calculate actual p-values from the shrunked gene list
##===========================================================
calculate.p.vals <- function (filePath, dat)
{
random.files <-list.files(path = filePath, pattern = "Random_*")
for (f in random.files)
{
name1 = gsub("Random_", "", gsub(".csv", "", f))
root = sapply(strsplit(name1,"_"), `[`, 1)
name = gsub (" ", "_", gsub ("Random_", "", gsub(".csv", "", f)))
out.file = paste (filePath, name, "_pval.txt", sep="")
dt <- read.csv(paste(filePath, root, ".csv", sep=""))
temp.dat <- cbind(dat[,3], t(dt),dat[,14])
colnames(temp.dat) <- c("SOX17", "GATA2_act", "PGR_act")
mod <- 'SOX17 ~ GATA2_act + PGR_act'
mod.fit <- sem (mod, data=temp.dat )
z.test <- mod.fit@ParTable$est[1]/mod.fit@ParTable$se[1]
p.gata2 <- 2*(1-pnorm(abs(z.test)))
z.test <- mod.fit@ParTable$est[2]/mod.fit@ParTable$se[2]
p.pgr <- 2*(1-pnorm(abs(z.test)))
neg.pvalues <- as.data.frame(cbind(p.gata2,p.pgr))
colnames(neg.pvalues ) <- c("GATA2", "PGR")
write.table(neg.pvalues, file = out.file, sep="\t", col.names=NA)
}
}
##======================================
##  In the end, calculate the index
##======================================
calculate.index <- function (p.val.path , withReplacement.random.p.path , withoutReplacement.random.p.path, dat )
{
#p.val.path <-  "X:/project2019/SEM/shinyRelated/testNewBootstrapResults/EliminationWithoutReplacement/"
#withReplacement.random.p.path <- "X:/project2019/SEM/shinyRelated/testNewBootstrapResults/EliminationWithReplacement/"
#withoutReplacement.random.p.path <- "X:/project2019/SEM/shinyRelated/testNewBootstrapResults/EliminationWithoutReplacement/"
index.results <- c()
f.in <- list.files(pattern = "_pval.txt", path = p.val.path )
for (f in f.in)
{
name = gsub("_pval.txt", "", f)
root = strsplit (name, "_")[[1]][1]
cnt  = strsplit (name, "_")[[1]][2]
actualPval  = paste (p.val.path , name, "_pval.txt", sep="")
oldBoostrap = paste (withoutReplacement.random.p.path, name,  "_random_pvalues.txt", sep="")
newBoostrap = paste (withReplacement.random.p.path , name,  "_random_pvalues.txt", sep="")
actualP = read.table (actualPval, header=TRUE)[,-1][1]
oldPs   = read.table (oldBoostrap , header=TRUE)[,-1][1]
newPs   = read.table (newBoostrap , header=TRUE)[,-1][1]
pval.dt <- cbind (newPs, oldPs)
colnames(pval.dt) = c("WithReplacement", "WithoutReplacement")
non.param.test <- non.parametric.test(pval.dt, actualP)
temp = cbind(root, non.param.test, cnt, actualP, mean(oldPs$GATA2), mean(newPs$GATA2))
colnames(temp) = c("Molecule", "Index", "OverlapGene", "GATA2_pval", "mean_wo_replacement_pvals", "mean_w_replacement_pvals")
index.results = rbind (index.results, temp)
}
return (index.results)
}
non.parametric.test <- function (dat, actualP, originalP = 0.0271)
{
count = 0
denominator = 0
if (actualP  >  originalP)
{
for (i in dat[which(dat[,1] < as.numeric(actualP)), 1])
{
if (i < originalP){
count = count + 1
}
}
denominator = length(which(dat[,2] < originalP))
}else{
for (i in dat[which(dat[,1] > as.numeric(actualP)), 1])
{
if (i > originalP){
count = count + 1
}
}
denominator = length(which(dat[,2] > originalP))
}
return(min(count/denominator, 1))
}
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
runApp('X:/project2020/SEM/IndexCalculation')
##      fileExt : fileExtension
##==================================================
library(BSgenome)
ref_genome <-  "BSgenome.Mmusculus.UCSC.mm10"
library(ref_genome, character.only = TRUE)
library(MutationalPatterns)
##===================================================================================================
##  Mutect2 calls vs merged normals  (10 samples)
##  callingAgainstMergeNormals_no_PON
##==========================
##===================================================================================================
##  Mutect2 calls : merged GBE vs merged normals
##  gtx/GINKGO/callingAgainstMergeNormals/
##  X:/project2020/exomeSeq/analysis4GBE/mergeFiles/
##===================================================================================================
fileExt  = "_finalSNV.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/gtx/GINKGO/callingAgainstDownsampleMergeNormals_no_PON/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
sample_names
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
colSums(mut_mat)
sample_names
fileExt  = "_finalSNV.vcf"
inputDir = "x:/project2018/NTP_exome_project/ReAnalyzeEffort/Mutect2Dir/GATK4/by_chemicals/gtx/GINKGO/callingAgainstDownsampleMergeNormals_no_PON/MutSig/"
vcf_files <- list.files(inputDir, pattern = fileExt , full.names = TRUE)
vcf_files
sample_names <-  gsub (fileExt , "", gsub (paste (inputDir, "Sample_", sep="") , "", vcf_files))
sample_names
vcfs <- read_vcfs_as_granges(vcf_files, sample_names, ref_genome)
mut_mat <- mut_matrix(vcf_list = vcfs, ref_genome = ref_genome)
spectrumDT <- list (f = vcfs, dat = mut_mat)
plot_96_profile(mut_mat)
colSums(mut_mat)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('wleepang/shiny-directory-input')
library(shinyDirectoryInput)
devtools::install_github('wleepang/shiny-directory-input')
library(mime)
install.packages("mime")
install.packages("mime")
devtools::install_github('wleepang/shiny-directory-input')
library(shinyDirectoryInput)
shinyDirectoryInput::runDirinputExample()
runApp('~/R/win-library/3.6/shinyDirectoryInput/example_application')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/example4/wButton.R')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
runApp('X:/learningR/learningRShiny/openFileDirectory/wleepang')
shinyServer(function(input, output, session) {
observe({
if(input$goButton > 0){
output$session <- renderText(function(){
list.files(choose.dir())})
}
})
})
runApp('X:/learningR/learningRShiny/openFileDirectory/exmaple5/aRussian.R')
runApp('X:/learningR/learningRShiny/openFileDirectory/exmaple5/aRussian.R')
runApp('X:/learningR/learningRShiny/openFileDirectory/exmaple5/aRussian.R')
runApp('X:/learningR/learningRShiny/openFileDirectory/exmaple5')
