pon2 <- c(99,
88,
99,
142,
118,
130,
111,
142,
107,
97
)
pon3 <- c(114,
112,
115,
180,
134,
138,
145,
171,
132,
123
)
pon5 <- c(150,
151,
165,
251,
195,
202,
214,
227,
178,
183
)
snv <- cbind (pon1,pon2,pon3,pon5)
snv
library(reshape2)
df2 <- melt(snv)
colnames(df2) <- c("Rep", "PON", "CNT")
boxplot(
formula = CNT ~ PON,
data    = df2,
boxwex  = 0.25,
at      = 1:4 - 0.2,
#  subset  = Type == "Rep",
col     = "yellow",
main    = "Number of SNV calls",
xlab    = "x",
ylab    = "y",
ylim    = c( 0, ceiling( max( df2$CNT ) ) + 1 ),
yaxs    = "i" )
snv
dt <- read.csv ("X:/project2017/SEQC2_TGSWG2/WES4/doc/snv-rd-dist.csv")
str(dt)
df2 <- melt(dt)
df2
dt <- read.csv ("X:/project2017/SEQC2_TGSWG2/WES4/doc/snv-rd-dist.csv")
df2 <- melt(dt)
df2
str(dt)
dt <- read.csv ("X:/project2017/SEQC2_TGSWG2/WES4/doc/snv-rd-dist.csv")
str(dt)
df2 <- melt(dt)
colnames(df2)
colnames(df2) <- c("Rep", "PON", "CNT")
boxplot(
formula = CNT ~ PON,
data    = df2,
boxwex  = 0.25,
at      = 1:4 - 0.2,
#  subset  = Type == "Rep",
col     = "yellow",
main    = "Number of SNV calls",
xlab    = "x",
ylab    = "y",
ylim    = c( 0, ceiling( max( df2$CNT ) ) + 1 ),
yaxs    = "i" )
boxplot(
formula = CNT ~ PON,
data    = df2,
#  boxwex  = 0.25,
#  at      = 1:4 - 0.2,
#  subset  = Type == "Rep",
col     = "yellow",
main    = "Number of SNV calls",
xlab    = "x",
ylab    = "y",
ylim    = c( 0, ceiling( max( df2$CNT ) ) + 1 ),
yaxs    = "i" )
summary(dt)
boxplot(
formula = CNT ~ PON,
data    = df2,
#  boxwex  = 0.25,
#  at      = 1:4 - 0.2,
#  subset  = Type == "Rep",
col     = "yellow",
main    = "Number of SNV calls",
xlab    = "Category",
ylab    = "SNV count",
ylim    = c( 0, ceiling( max( df2$CNT ) ) + 1 ),
yaxs    = "i" )
mtext("WES4 Mutect2 without matched normal")
boxplot(
formula = CNT ~ PON,
data    = df2,
#  boxwex  = 0.25,
#  at      = 1:4 - 0.2,
#  subset  = Type == "Rep",
col     = "yellow",
main    = "SNV count distribution cross samples",
xlab    = "Category",
ylab    = "SNV count",
ylim    = c( 0, ceiling( max( df2$CNT ) ) + 1 ),
yaxs    = "i" )
mtext("WES4 Mutect2 without matched normal")
24.99*24
source ("x:/project2019/SEM/rScripts/helpScripts/SEM_util.R")
library("lavaan")
source ("X:/project2015/DieselWes/Rscripts/dmPairs.R")
library(RColorBrewer)
14437088/46347343
170938/46347343
1931142-171543
69134- 68928
chr1    69212   69810
69810 - 69212
20981181/49680799
testP (as.numeric(ATF4.p[1]) , dt$GATA2)
testP (as.numeric(ATF4.p[2]) , dt$PGR)
##===================================
##  Meeting ends: 03272019
##===================================
profile.plot <- function (dt, fig.title, fig.subtitle = "", plot.colors, legPost = "topleft")
{
lgd <- colnames(dt)
plotDensity (dt, main = fig.title, xlab = "Negative log (10) of pvalues", ylab= "Density"  , type="n")
mtext (fig.subtitle)
for (i in 1:length(plot.colors))
{
lines(density(dt[,i]), col=plot.colors[i], lty=2)
}
legend (legPost,lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)    #PGR
}
##===================================
##  Meeting starts: 06242019
##===================================
source ("x:/project2019/SEM/rScripts/helpScripts/SEM_util.R")
library("lavaan")
library(RColorBrewer)
library(affy)
library("lavaan")
##===================================
##  Meeting ends: 03272019
##===================================
profile.plot <- function (dt, fig.title, fig.subtitle = "", plot.colors, legPost = "topleft")
{
lgd <- colnames(dt)
plotDensity (dt, main = fig.title, xlab = "Negative log (10) of pvalues", ylab= "Density"  , type="n")
mtext (fig.subtitle)
for (i in 1:length(plot.colors))
{
lines(density(dt[,i]), col=plot.colors[i], lty=2)
}
legend (legPost,lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)    #PGR
}
##===================================
##  Meeting starts: 06242019
##===================================
source ("x:/project2019/SEM/rScripts/helpScripts/SEM_util.R")
library("lavaan")
library(RColorBrewer)
library(affy)
library("lavaan")
library(RColorBrewer)
library(affy)
27145*.9
27349*.9
583+968+874
2425/34
2425/36
583+968+874+600
3025/36
shiny::runApp('X:/project2019/SEM/shinyRelated/NewBootstrap')
##==================================
##  All work out as expected!!
##==================================
library(dndscv)
sessionINfo()
sessionInfo()
tmpdir <- tempdir() #
tmpdir
##        inheritated from SignatureAnalysis
##==========================================================
library(readxl)
library(tidyr)
library(stringr)
library(parallel)
library(foreach)
library(doParallel)
#setwd("x:/project2019/SEM/shinyRelated/Bootstrap/")
#setwd("C:/Users/dayk2/Desktop/Bootstrap/CSVs")
MasterSig <- read_excel("x:/project2019/SEM/shinyRelated/Bootstrap/Human Sig.xlsx")
HumanArray <- read_excel("x:/project2019/SEM/shinyRelated/Bootstrap/Human Array.xlsx")
#head(HumanArray)
colnames(HumanArray)[1]<-"Gene"
names <- c("ATF4","beta-estradiol","EGFR", "ERN1","FOXO3","HOXA10","MITF","progesterone","PTEN","RUNX3","TGFBR1","Vegf","XBP1")
targets <- c(34,289,73,31,62,39,27,124,83,20,14,72,45)
outDir <- "X:/project2019/SEM/tempDir/"
##=====================================================
##  Helper functions follows
##=====================================================
singleGeneProcess.serial <- function (MasterSig, HumanArray, reg, tempDir, names, targets)
{
cName <- names[reg]
targetNumber <- targets[reg]
TScores <- matrix(0,nrow=1000,ncol=length(HumanArray)-1)
for(i in 1:nrow(TScores)){
TScores[i,1] <- paste0("Random_",cName,"_",targetNumber,"_",str_pad(i, 4, pad = "0")) #Random_34_0001
set.seed(1+i*100+reg)
eliminateRandoms <- sample.int(nrow(MasterSig),targetNumber)
subSet <- MasterSig[-eliminateRandoms,]
a <-subSet[!duplicated(subSet[,1]),]
colnames(a)[1]<-"Human"
a$Human[a$Human == "?"] <- NA
a<-na.omit(a)
a<-a[order(a$Human),]
a$Human <- toupper(a$Human)
HumanArray$Gene <- toupper(HumanArray$Gene)
overlap <- intersect(a$Human,HumanArray$Gene)
a <- a[a$Human %in% overlap,] # get rid of non-overlaps
ArrayDummy <- HumanArray[HumanArray$Gene %in% overlap,]
ArrayDummy<-ArrayDummy[order(ArrayDummy$Gene),]
final <- merge(a, ArrayDummy, by.x="Human", by.y="Gene")
final[4:length(final)] <- lapply(final[4:length(final)], as.numeric)
HighLow <- split(final, final$Signature)
High <- HighLow$High
Low <- HighLow$Low
for(j in 1:(ncol(TScores)-1)){
TScores[i,j+1]<- t.test(High[j+3],Low[j+3], alternative="two.sided", paired =FALSE, var.equal=TRUE)$statistic
}
}
colnames(TScores)[2:ncol(TScores)] <- colnames(final)[4:ncol(final)]
colnames(TScores)[1] <- "Run"
filePath <- paste0(tempDir, "/", cName,"_",targetNumber,".csv")
write.csv(TScores,filePath,row.names=F)
}
##=================================================
##  parallel version
##=================================================
singleGeneProcess.parallel <- function (MasterSig, HumanArray, reg, tempDir, names, targets)
{
cName <- names[reg]
targetNumber <- targets[reg]
numOfArray <- dim(HumanArray)[2] - 2
expNames   <- colnames(HumanArray)[3:dim(HumanArray)[2]]
# numCores <- detectCores()/2
numCores <- detectCores() - 5
cl <<- parallel::makeCluster(numCores)
on.exit(stopCluster(cl))
on.exit(stopImplicitCluster())
on.exit(registerDoSEQ())
doParallel::registerDoParallel(cl)
TScores<- foreach(i = 1:1000, .combine = 'rbind') %dopar% {
require(stringr)
tmpName      <- paste0("Random_",cName,"_",targetNumber,"_", str_pad (i, 4, pad = "0")) #Random_34_0001
set.seed(1+i*100+reg)
eliminateRandoms <- sample.int(nrow(MasterSig),targetNumber)
subSet <- MasterSig[-eliminateRandoms,]
a <-subSet[!duplicated(subSet[,1]),]
colnames(a)[1]<-"Human"
a$Human[a$Human == "?"] <- NA
a<-na.omit(a)
a<-a[order(a$Human),]
a$Human <- toupper(a$Human)
HumanArray$Gene <- toupper(HumanArray$Gene)
overlap <- intersect(a$Human,HumanArray$Gene)
a <- a[a$Human %in% overlap,] # get rid of non-overlaps
ArrayDummy <- HumanArray[HumanArray$Gene %in% overlap,]
ArrayDummy<-ArrayDummy[order(ArrayDummy$Gene),]
final <- merge(a, ArrayDummy, by.x="Human", by.y="Gene")
final[4:length(final)] <- lapply(final[4:length(final)], as.numeric)
HighLow <- split(final, final$Signature)
High <- HighLow$High
Low <- HighLow$Low
tScores <- c()
tScores[1] <- tmpName
for(j in 1:numOfArray){
tScores[j+1]<- t.test(High[j+3],Low[j+3], alternative="two.sided", paired =FALSE, var.equal=TRUE)$statistic
}
t(tScores)
}
parallel::stopCluster(cl)
# registerDoSEQ()
# invisible(gc); remove(nCores); remove(nThreads); remove(cluster);
colnames(TScores)[2:ncol(TScores)] <- expNames
colnames(TScores)[1] <- "Run"
filePath <- paste0(tempDir,"/Random_",cName,"_",targetNumber,"_parallel.csv")
#  files <-c(files,filePath)
write.csv(TScores,filePath,row.names=F)
}
reg = 11
parallel.time <- system.time(singleGeneProcess.parallel (MasterSig, HumanArray, reg,outDir, names, targets))
print(parallel.time)
singleGeneProcess.parallel <- function (MasterSig, HumanArray, reg, tempDir, names, targets)
{
cName <- names[reg]
targetNumber <- targets[reg]
numOfArray <- dim(HumanArray)[2] - 2
expNames   <- colnames(HumanArray)[3:dim(HumanArray)[2]]
numCores <- detectCores()/2
# numCores <- detectCores() - 5
cl <<- parallel::makeCluster(numCores)
on.exit(stopCluster(cl))
on.exit(stopImplicitCluster())
on.exit(registerDoSEQ())
doParallel::registerDoParallel(cl)
TScores<- foreach(i = 1:1000, .combine = 'rbind') %dopar% {
require(stringr)
tmpName      <- paste0("Random_",cName,"_",targetNumber,"_", str_pad (i, 4, pad = "0")) #Random_34_0001
set.seed(1+i*100+reg)
eliminateRandoms <- sample.int(nrow(MasterSig),targetNumber)
subSet <- MasterSig[-eliminateRandoms,]
a <-subSet[!duplicated(subSet[,1]),]
colnames(a)[1]<-"Human"
a$Human[a$Human == "?"] <- NA
a<-na.omit(a)
a<-a[order(a$Human),]
a$Human <- toupper(a$Human)
HumanArray$Gene <- toupper(HumanArray$Gene)
overlap <- intersect(a$Human,HumanArray$Gene)
a <- a[a$Human %in% overlap,] # get rid of non-overlaps
ArrayDummy <- HumanArray[HumanArray$Gene %in% overlap,]
ArrayDummy<-ArrayDummy[order(ArrayDummy$Gene),]
final <- merge(a, ArrayDummy, by.x="Human", by.y="Gene")
final[4:length(final)] <- lapply(final[4:length(final)], as.numeric)
HighLow <- split(final, final$Signature)
High <- HighLow$High
Low <- HighLow$Low
tScores <- c()
tScores[1] <- tmpName
for(j in 1:numOfArray){
tScores[j+1]<- t.test(High[j+3],Low[j+3], alternative="two.sided", paired =FALSE, var.equal=TRUE)$statistic
}
t(tScores)
}
parallel::stopCluster(cl)
# registerDoSEQ()
# invisible(gc); remove(nCores); remove(nThreads); remove(cluster);
colnames(TScores)[2:ncol(TScores)] <- expNames
colnames(TScores)[1] <- "Run"
filePath <- paste0(tempDir,"/Random_",cName,"_",targetNumber,"_parallel.csv")
#  files <-c(files,filePath)
write.csv(TScores,filePath,row.names=F)
}
parallel.time <- system.time(singleGeneProcess.parallel (MasterSig, HumanArray, reg,outDir, names, targets))
print(parallel.time)
reg = 2
parallel.time <- system.time(singleGeneProcess.parallel (MasterSig, HumanArray, reg,outDir, names, targets))
print(parallel.time)
reg
reg = 1
parallel.time <- system.time(singleGeneProcess.parallel (MasterSig, HumanArray, reg,outDir, names, targets))
print(parallel.time)
serial.time <- system.time(singleGeneProcess.serial  (MasterSig, HumanArray, reg, outDir, names, targets))
print(serial.time)
reg = 2
serial.time <- system.time(singleGeneProcess.serial  (MasterSig, HumanArray, reg, outDir, names, targets))
print(serial.time)
reg
reg = 11
serial.time <- system.time(singleGeneProcess.serial  (MasterSig, HumanArray, reg, outDir, names, targets))
print(serial.time)
parallel.time <- system.time(
for (reg in 1:length(targets))
{
singleGeneProcess.parallel(MasterSig, HumanArray, reg, outDir, names, targets)
}
)
print(parallel.time)
setwd("x:/project2019/SEM/Nov_poster/")
setwd("X:/project2019/SEM/SA_new_08082019/newBootstrapResults/")
profile.plot <- function (dt, fig.title, fig.subtitle = "", plot.colors)
{
sampleNames <- colnames(dt)
lgd <- sampleNames
plotDensity (dt, main = fig.title, xlab = "Negative log (10) of pvalues", ylab= "Density", type="n")
mtext (fig.subtitle)
for (i in 1:length(plot.colors))
{
lines(density(dt[,i]), col=plot.colors[i], lty=2)
}
#legend ("topleft",lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)    #PGR
legend ("topright",lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)  #GATA2
}
profile.plot.w.exp <- function (dt, fig.title, fig.subtitle = "", plot.colors, exp = 2)
{
sampleNames <- colnames(dt)
lgd <- sampleNames
plotDensity (nthroot(dt,exp), main = fig.title, xlab = "Negative log (10) of pvalues", ylab= "Density", type="n")
axis(side=1, at=nthroot(dt,exp))
mtext (fig.subtitle)
for (i in 1:length(plot.colors))
{
lines(density(nthroot(dt[,i],exp)), col=plot.colors[i], lty=2)
}
#legend ("topleft",lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)    #PGR
legend ("topright",lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)  #GATA2
}
profile.plot.w.custome.axis <- function (dt, fig.title, fig.subtitle = "", plot.colors, exp = 2)
{
sampleNames <- colnames(dt)
lgd <- sampleNames
plotDensity (nthroot(dt,exp), main = fig.title , xlab = paste ("Squared root of " , exp , sep=""), ylab= "Density", xaxt = 'n', type="n")
axis (side = 1, at = (1:10)/10 , labels=c("0.10",  "0.20","0.30",  "0.40","0.50",  "0.60","0.70",  "0.80", "0.9", "1"))
mtext (fig.subtitle)
for (i in 1:length(plot.colors))
{
lines(density(nthroot(dt[,i],exp)), col=plot.colors[i], lty=2)
}
#legend ("topleft",lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)    #PGR
legend ("topright",lgd, text.col = plot.colors, lty = c(rep(1,12)), col =  plot.colors)  #GATA2
}
pvalue.files <- list.files(pattern = ".txt")
GATA2.pvalues <- NULL
PGR.pvalues <- NULL
columnNames <- c()
for (f in pvalue.files)
{
name = gsub("Random_","", gsub("_random_pvalues.txt", "", f))
dt <- read.table(f, header = TRUE)
GATA2.pvalues <- cbind(GATA2.pvalues, sort(dt$GATA2))
PGR.pvalues   <- cbind(PGR.pvalues, sort(dt$PGR))
columnNames <- c (columnNames , name)
}
colnames(GATA2.pvalues) <- columnNames
colnames(PGR.pvalues) <- columnNames
library(RColorBrewer)
cols <- brewer.pal(8, "Paired")
# I can add more tones to this palette :
plot.colors = colorRampPalette(cols)(length(columnNames))
profile.plot(-log(PGR.pvalues, 10), "1000 bootstrap SEM pvalue distribution", "PGR effect" , plot.colors = plot.colors )
library(affy)
profile.plot(-log(PGR.pvalues, 10), "1000 bootstrap SEM pvalue distribution", "PGR effect" , plot.colors = plot.colors )
profile.plot(-log(GATA2.pvalues, 10), "1000 bootstrap SEM pvalue distribution", "GATA2 effect" , plot.colors = plot.colors )
profile.plot(GATA2.pvalues, "1000 bootstrap SEM pvalue distribution", "GATA2 effect" , plot.colors = plot.colors )
profile.plot(sqrt(GATA2.pvalues), "1000 bootstrap SEM pvalue distribution", "GATA2 effect" , plot.colors = plot.colors )
setwd("x:/project2019/SEM/Nov_poster/")
setwd("X:/project2019/SEM/shinyRelated/Bootstrap/CSVs_old")
pvalue.files <- list.files(pattern = ".txt")
GATA2.pvalues <- NULL
PGR.pvalues <- NULL
columnNames <- c()
for (f in pvalue.files)
{
name = gsub("_random_pvalues.txt", "", f)
dt <- read.table(f, header = TRUE)
GATA2.pvalues <- cbind(GATA2.pvalues, sort(dt$GATA2))
PGR.pvalues   <- cbind(PGR.pvalues, sort(dt$PGR))
columnNames <- c (columnNames , name)
}
colnames(GATA2.pvalues) <- columnNames
colnames(PGR.pvalues) <- columnNames
library(RColorBrewer)
cols <- brewer.pal(8, "Paired")
# I can add more tones to this palette :
plot.colors = colorRampPalette(cols)(length(columnNames))
profile.plot(GATA2.pvalues, "1000 bootstrap SEM pvalue distribution", "GATA2 effect" , plot.colors = plot.colors )
setwd("X:/project2019/SEM/shinyRelated/Bootstrap/CSVs_old")
pvalue.files <- list.files(pattern = ".txt")
GATA2.pvalues <- NULL
PGR.pvalues <- NULL
columnNames <- c()
for (f in pvalue.files)
{
name = gsub("_random_pvalues.txt", "", f)
dt <- read.table(f, header = TRUE)
GATA2.pvalues <- cbind(GATA2.pvalues, sort(dt$GATA2))
PGR.pvalues   <- cbind(PGR.pvalues, sort(dt$PGR))
columnNames <- c (columnNames , name)
}
colnames(GATA2.pvalues) <- columnNames
colnames(PGR.pvalues) <- columnNames
library(RColorBrewer)
cols <- brewer.pal(8, "Paired")
# I can add more tones to this palette :
plot.colors = colorRampPalette(cols)(length(columnNames))
profile.plot(GATA2.pvalues, "1000 bootstrap SEM pvalue distribution", "GATA2 effect" , plot.colors = plot.colors )
profile.plot(-log(PGR.pvalues, 10), "1000 bootstrap SEM pvalue distribution", "PGR effect" , plot.colors = plot.colors )
origin.pvalue.files <- list.files(pattern = ".txt", path ="X:/project2019/SEM/shinyRelated/Bootstrap/CSVs_old/")
GATA2.pvalues <- NULL
PGR.pvalues <- NULL
columnNames <- c()
for (f in origin.pvalue.files)
{
name = gsub("_random_pvalues.txt", "", f)
f.in = paste ("X:/project2019/SEM/shinyRelated/Bootstrap/CSVs_old/", f , sep='')
dt <- read.table(f.in, header = TRUE)
GATA2.pvalues <- cbind(GATA2.pvalues, sort(dt$GATA2))
PGR.pvalues   <- cbind(PGR.pvalues, sort(dt$PGR))
columnNames <- c (columnNames , name)
}
colnames(GATA2.pvalues) <- columnNames
colnames(PGR.pvalues) <- columnNames
old.GATA2.pvalues = GATA2.pvalues
old.PGR.pvalues=PGR.pvalues
summary(old.GATA2.pvalues[,1])
plot(new.GATA2.pvalues[,1], old.GATA2.pvalues[,1])
pairs(cbind(new.GATA2.pvalues[,1], old.GATA2.pvalues[,1]))
head(cbind(new.GATA2.pvalues[,1], old.GATA2.pvalues[,1]))
cor(cbind(new.GATA2.pvalues[,1], old.GATA2.pvalues[,1]))
summary(old.GATA2.pvalues)
summary(old.GATA2.pvalues[,1])
